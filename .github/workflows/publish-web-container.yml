name: Build and Deploy Blit

env:
  PROJECT_NAME: blit
  ACCOUNT: radiosilence
  DEPLOYMENT_REPO: jaritanet
  DEPLOYMENT_BRANCH: main
  DEPLOYMENT_CONFIG_PATH: packages/k8s/Pulumi.main.yaml

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - main
    paths:
      - "app/**"
      - "bun.lock"
      - "package.json"
      - "Dockerfile.nano"
      - "Dockerfile.bun"
      - .github/workflows/publish-web-container.yml
  pull_request:

jobs:
  build-and-push:
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm64' || 'ubuntu-latest' }}
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        variant:
          # - name: nano
          #   dockerfile: Dockerfile.nano
          #   is_default: false
          - name: bun
            dockerfile: Dockerfile.bun
            is_default: true
        arch:
          - amd64
          - arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/blit
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest-${{ matrix.variant.name }}-${{ matrix.arch }},enable={{is_default_branch}}
            type=sha,suffix=-${{ matrix.variant.name }}-${{ matrix.arch }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.variant.dockerfile }}
          platforms: linux/${{ matrix.arch }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  create-manifest:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        variant:
          # - name: nano
          #   dockerfile: Dockerfile.nano
          #   is_default: false
          - name: bun
            dockerfile: Dockerfile.bun
            is_default: true

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          IMAGE_BASE="ghcr.io/${{ github.repository_owner }}/blit"
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)

          # Create manifest for variant-specific latest tag
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker manifest create \
              ${IMAGE_BASE}:latest-${{ matrix.variant.name }} \
              ${IMAGE_BASE}:latest-${{ matrix.variant.name }}-amd64 \
              ${IMAGE_BASE}:latest-${{ matrix.variant.name }}-arm64

            docker manifest push ${IMAGE_BASE}:latest-${{ matrix.variant.name }}
          fi

          # Create manifest for SHA tag
          docker manifest create \
            ${IMAGE_BASE}:sha-${SHORT_SHA}-${{ matrix.variant.name }} \
            ${IMAGE_BASE}:sha-${SHORT_SHA}-${{ matrix.variant.name }}-amd64 \
            ${IMAGE_BASE}:sha-${SHORT_SHA}-${{ matrix.variant.name }}-arm64

          docker manifest push ${IMAGE_BASE}:sha-${SHORT_SHA}-${{ matrix.variant.name }}

          # Create default latest tag for default variant
          if [ "${{ matrix.variant.is_default }}" = "true" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker manifest create \
              ${IMAGE_BASE}:latest \
              ${IMAGE_BASE}:latest-${{ matrix.variant.name }}-amd64 \
              ${IMAGE_BASE}:latest-${{ matrix.variant.name }}-arm64

            docker manifest push ${IMAGE_BASE}:latest

            # Create SHA tag without variant suffix for default variant
            docker manifest create \
              ${IMAGE_BASE}:sha-${SHORT_SHA} \
              ${IMAGE_BASE}:sha-${SHORT_SHA}-${{ matrix.variant.name }}-amd64 \
              ${IMAGE_BASE}:sha-${SHORT_SHA}-${{ matrix.variant.name }}-arm64

            docker manifest push ${IMAGE_BASE}:sha-${SHORT_SHA}
          fi

  update-deployment:
    runs-on: ubuntu-latest
    needs: create-manifest
    if: github.ref == 'refs/heads/main'

    env:
      SHORT_SHA: sha-${{ github.sha }}

    steps:
      - name: Checkout deployment repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.ACCOUNT }}/${{ env.DEPLOYMENT_REPO }}
          ref: ${{ env.DEPLOYMENT_BRANCH }}
          token: ${{ secrets.DEPLOYMENT_PAT }}
          path: ${{ env.DEPLOYMENT_REPO }}

      - name: Update service tag and httpPort in deployment config
        run: |
          SHORT_SHA_TRIMMED="${{ env.SHORT_SHA }}"
          SHORT_SHA_TRIMMED=${SHORT_SHA_TRIMMED:0:11}

          yq eval \
            '(.config."jaritanet-k8s:services"[] | select(.name == "${{ env.PROJECT_NAME }}") | .args.image.tag) = "'$SHORT_SHA_TRIMMED'"' \
            -i ${{ env.DEPLOYMENT_REPO }}/${{ env.DEPLOYMENT_CONFIG_PATH }}

          yq eval \
            '(.config."jaritanet-k8s:services"[] | select(.name == "${{ env.PROJECT_NAME }}") | .args.httpPort) = 3000' \
            -i ${{ env.DEPLOYMENT_REPO }}/${{ env.DEPLOYMENT_CONFIG_PATH }}

      - name: Commit and push deployment update
        run: |
          cd ${{ env.DEPLOYMENT_REPO }}

          SHORT_SHA_TRIMMED="${{ env.SHORT_SHA }}"
          SHORT_SHA_TRIMMED=${SHORT_SHA_TRIMMED:0:11}

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add ${{ env.DEPLOYMENT_CONFIG_PATH }}
          git commit -m "ðŸš€ Update ${{ env.PROJECT_NAME }} service to $SHORT_SHA_TRIMMED"
          git push
