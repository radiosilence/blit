apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: flightsim-worker
  labels:
    app: flightsim-worker
    chart: concourse-16.1.21
    release: flightsim
    heritage: Helm
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: flightsim-worker
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flightsim-web
  labels:
    app: flightsim-web
    chart: concourse-16.1.21
    heritage: Helm
    release: flightsim
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flightsim-worker
  labels:
    app: flightsim-worker
    chart: concourse-16.1.21
    heritage: Helm
    release: flightsim
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flightsim-mailhog
  labels:
    helm.sh/chart: mailhog-5.0.5
    app.kubernetes.io/name: mailhog
    app.kubernetes.io/instance: flightsim
    app.kubernetes.io/version: v1.0.1
    app.kubernetes.io/managed-by: Helm
  namespace: default
imagePullSecrets: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flightsim-minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-8.0.10
    release: flightsim
    heritage: Helm
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flightsim-minio
  namespace: default
  labels:
    app: minio
    chart: minio-8.0.10
    release: flightsim
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flightsim-vault
  namespace: default
  labels:
    helm.sh/chart: vault-0.19.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: flightsim
    app.kubernetes.io/managed-by: Helm
---
apiVersion: v1
kind: Secret
metadata:
  name: flightsim-concourse-postgres
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: flightsim
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-postgres-password: bFBDWEV5b0EzTg==
  postgresql-password: Y29uY291cnNl
---
apiVersion: v1
kind: Secret
metadata:
  name: flightsim-web
  labels:
    app: flightsim-web
    chart: concourse-16.1.21
    release: flightsim
    heritage: Helm
type: Opaque
data:
  host-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMkFVUFh4dWlEQy9xckJXaklkVDVmdk5jTWxNRVlwUjNYNFNMUUlnTEMxVUxEc0NPCmZsZUtaK1dpNFJ6d2JrVUtpS21KbTVHZXlOVlZDRGRmdmREMVNkMSs1ZmFxbXAyL09RQnpMUzdvOE5ZL2J0TXcKOGg5bHg0S1ZKYUpKMUVNMUVpeUdZNDFOeDU5MUtQMTRwQmZyMC9OZE9JckR1Mkp2RjZlN0NIRWJyemtONTdrYgpCVlFrYUlNYVMwMVJ3LzVPZTY4R0ZhbGxpMmlpOEw4ZE5XVlZ6cXVCaDVQd1ZXaW12VGd3djNUWUcyVEg4TDFWClY3bisvelJScGtqTWwyK1BVb3VHcUQrQnArNHdGK2hwNEFXNXYyNENxanRMSkVNdjRJRUp2MkZSZnJPYXVCSVoKWGpBUzFTU2c5VmFUT1MzaXd4YVlydjh1RzFYZk1GSElDdmtFUFFJREFRQUJBb0lCQUc4N1c4anJYNnZLMkptMwpvb0ovT2VGbXltaVhXc0N3RmkrMi9rVkNSLzJUMHRmTHl4Ty9XK05YMldEMUY5Q1ArSGFhWmVNWFBwM0hTN3VwClY4RlQ0Wm9oVllCd1hUUzBXWXl1Y0tBcGNZVGhyVlFScHpobGRuRWZDbEdRbVZlVks3U3AvS0V5VjRTYzFTVkEKTDJpL2NJMTQyTjJPaG03c3BxdVZrTGN1RnNWSU56WjBmWEN2MjVkVHFia0VnalRKek5kQnp5Rlh2YzR6ME10OQpnVzE0TTdteitZS1lPZnNDeElFbTQzOGZDOWIxNkM5NnlJRkJkTisvamFQOHBtYjJSb0lFMkQwRjhiajVLMWhSCll5R0ZLTU9VNGU2Y1lxNTlpV2Z1Ykt1dTJXTkpFQmsvNWFPN3g3WHUyUzBrOHdJWWx3eEZ1dTRMZlIyS3ZpenUKK21GVmYza0NnWUVBOWUwKzQwdEpHcE9QTThoQUIzRHdYalljOGxDdXlZZjN6MzBUM1JxVk5DVVZTV25sYWovcwozRU5pNitOZzN1K1pzOGNSMkNGb3UrakFDbFR5V0x1U25JOXlBQ0QwZXlXOW40YnpZTVViZ2RDNnZuZUxqcHp4CndXUjlYdjVSbVpWbHk3eFd1cWNnRWVFZjhSTmNZSTNvWGJ5MGxhRjNFT2J2dUF4LzRFVElrRmNDZ1lFQTRONDIKdzFVRVdHb3BXQklJWFlIa0VQSFF1RjBTeFIyQ1p5aDlFeFRlU3hGcGh5aWJrY0hSakRXK3Q5MVpMblNtNWsxTgpUT2RZdWMwQXBCVjNVK1RleGVGdkRJOTRML096ZTZIdDVNYXRSUXo4a1J3TUZHSkwzVHJwYmdUbVdkZkcwNUFkCm9pU2NKendZMTZvSlhuS3VzeGlrN1YrZ0NDTk5FMC8yVXVNblk0c0NnWUFFZjgycHZPUGVmNXFjR09ySytBNzkKdWtHM1VUQ1JjVkpnVW1wOW5oSGl2VmJ4VytXZGx3UFBWOUJFZm9sMEtyQUdNUHNybUJqaGJ6V3NPcmVnVmZZdAp0UlloMkhpQWxFVXUyUG8wNkFaRHpyekw1VVlCV3UrMVdSQk9INXNBazFJa2N4S25JWTJkcGgrK2Vsc3pUUVZXClNiQ0lHRWNrWVFVN3VjYlJKSkVDeXdLQmdCYjR2SEZ4OHZLeFRhM3drYWd6eDcrdlpGb2hML1N4RWd4Rng1azIKYllzUHFVOGtaOWdaQzdZZUczQ2ZEU2hBeEhnTWQ1UWVvaUxBL1lyRm9wNFFhRzJnblA2VWZYdXdrcXBUbllEYwpod0RoMWI5aE5SNno5L29PdGFBR29oMlZmSHRLWXF5WXZ0Y0hQYVp5ZVdpTG9Lc3RIbFFkaTdTcEhvdVZoSjF0CkZTNEhBb0dBR3krNTYrenZkUk9qSnk5QTJNbi80QnZXcnN1NFJTUUlMQko2SGI0VHBGNDZwMmZuMHJ3cXloT2oKT2Njcyt4a2RFc0k5dzVwaFh6SUVlT3EyTHF2V0hEUHh0ZExweE9ycm14NEFmdEFXZE04UzErT3FUcHpIaWhLMQp5MVpPcldmdk9OK1hqV0ZGQUVlai9DcFFaa05Va1R6alR0U0MwZG5mQXZlWmxhc1FIZEk9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
  session-signing-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd0xxbC9yVUlhSStQWDdUbDNGV2NUZWU0c1FmOC9kYWFrQUxYeDk1NXRQd2tocWxZCmU0VDJWODRwL3lsRnZOV3BNNHZmY01ZS2ZNWTBKTEtnQWdCdkpoQ3l0U2tEQmhUQm9XbU42eUUwQUIxMVA5RW4KbElaUkJXTllxYUMyY1NnZTJaRDhxT1Nud2ZGaG5RQVc4KzdwRStFbEpBVmg3ZHRkRjNBNDc4SDUwbElpZ3E4SQp6TVdwMkVHSnBGQzcvVXUzNm9JTC8wM01OR0NtckgxanZ0VHVKaUFNUVVaWXlMMVJlQmt2dkhPenc5aTRIWFB5ClNNVnRjbGxtNE5CczJhVlB0d2hyMmt3U2tMdDh0MWJQZFJuNk9JeUVBdzVXa3R6QUthaVpua1R2ajZnM3h6ZHAKektjcmRsQnI5YXpubE52b1NpbkJVZnZ0d3lGbXZGTjFISGJBOXdJREFRQUJBb0lCQUU3Ry9EclVmSTlndnRYNwo5MGpNcFlzaWdGZThVQ2pobzJQaUJabG8wbzZyMGJKSlhpVisvOEo4UHFaUmxIUFBVYzRFQ2x6cVZqY1NQUllTCi9WeFVHUnFTRUxvRC9YeHExNHJHdm4reG5yTzlWc096Rmw2YldGcS9kT3BCQ3RITitHNHQyVmlmdmdLRVM4WUUKMTF6MTlzZHRhK1VCWGpuL1JGbmtRU0dmUkNJM1FxVGFZdmp4ZXZ0MHVXbHlQbXFrRlBRUXc4YnZISVh6b0IrQgpyemVpTWErK25NdmJYNXBBSDlYQTBCdmh5dUgzZkhpZFRVd2lWQnBrTWNwTFd0alAwQTBKVHNlY0RkYmluRERxCnVuMkVJbzh6TVdSd0tRTi9KblV4c2k4QVVFaWdCVENVcWVEZ1JFWHRXNjJ1dkZrU3BjVk1Yd21WaXR5TFlJVnkKcW5WTFVDRUNnWUVBNkl3WGtQMXFuU2ZjTmVvVkkveXBEdXoxL2tkcWNqU1BoTFllK2pkaUxMb0ZrTVc5QWxEbQpsendOYVdsVEZEOXlnbytOakpDbzYzL0E4SENtNTVzYWp3czVoWjZyMjB2ZFpjS0ZNazloMHFGNW9WQTdsa1EyCmd2RzJXYXpudVU3S2txaGZQK3BYaGlMZ1pLb0prc3QvK2c3cjZ1SHByZWR3RFk2aHhlQks0dnNDZ1lFQTFDcUgKOHl3QzVxVW8vMzZrUWcvVFUyYWROL1lFSGRKQUFiVTIzRVZyR1FTVm1uWFcwOEgyTkxGazB0c3hyd29ObmJncApQSWsySjdCaW1iSnZiTkQxN2licjRHQWtsRFRzUjhhSmtEbCswSmdOQ0FLOU4wN3FWdDFzN0ZYemhnOTVqVUw5CkVRVzU1ejYwR0FKcGVjcU53QTRKc2E4UDg1Mk4wMzU1T2JwOTJUVUNnWUJrT0J2ZjdKY0o2NmZIeEg0ZjZEK2oKb3hQUTVrNUZzY2s0VkpTOUdTbENSVmtvcjA5cHRCdnNpWUR1TU9vUkM5YjUxWXdYVEREQWJXcGxOT2Q1WVNydApBdFZqZEtKei9Cb0tSTzdLWTlPd3hzNTRhdStETHhxZkREU2VLUm9ram9SVytDRTBsblhwNVJYM3pDQWNGMytyCjhNcFRpOUQ5bFlTQkV6czg0QkRtQ1FLQmdRQ01jSDYvSzNIY0pKVm4wZmQrdHlVR2Z0VXc5c3N3eGp5U0pOYmsKcFpySDI2My9xV01EbHMrWGY1a2lyZTlNVTFaQ0FXWmlhTjBORm9lZC8yd2NWcEdFREFWMDU0OHUvMzByNGJLcgpZak9jZGhtaUpOWUZKMXFkRjBNRGliMkNEdnBCMUliWlhyWDQ2UnVqRE8ydXJiSjQzNUh4S05WaFIvaGFkOHhjCnR5S1l4UUtCZ0NWRGhOME1obmxVUUpWWmZYNDJBUG1GNGdRZzByM3NmTC9OR1hqRWpNSUtLRmU1YTg4ZVpWSHIKTDh4MStkcDBxN2N6QzhhL2wxRFV1aXdES2w4T0VweExzR0NxL0ovd0FmclNNUGlmdTZFVWxiVXdsSk9QZGdoYQorcC9LRkFlbEhYSjJ3Lzh5YWNrQWNhcmgzNVZQN2l4aHV2eHN3SE5kZ3Zmc0JURmNqbjMwCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
  worker-key-pub: c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDNDk2RlNZRmNCQUtnRHRNc0JBSmlGLzYvTnhsWEtQNVVaZWN5RXNlZFl1VHQxR09nSlR3YUExcVoxTG1Ic2JmTERFNjhvRGRpTTR1dnhmSTR3dExoejU3dzN1MGpPVXhaMkplRjdTVndFZjFuVnFMbjRHaC9mOEdVTlFHU3lJcDF6VUQ1Qng5ZnEwUEF5UTQ3bXQ3VWZpODRyY2Y4TEtsN256QUlIVGNkZzJCdlRrUU45YlVHUGFxL1BiMVcyYktQQVF5NE96WFRTSXlyQUo4OVRIMmpGZWFaZnl4UUZHYkQ5alZISC95bDBvaU1yRGVhUllnY2NFNUlJK0tZN1dvTGpzQnJ5LzlRZjJFUkVMS1RLNFVlSUdJcVdjaTlsYWIxdGkrR3hGUFBpQzNrck5Gam80alNoVjRlVXM0Y05Jcmp3TnJ4VmFLUFhtVTZvN1kzSHBheXggQ29uY291cnNl
  local-users: Y29uY291cnNlOmNvdXJzZSx0ZWFtbGVhZDpwYXNzd29yZCxkZXZlbG9wZXI6cGFzc3dvcmQ=
  vault-ca-cert: ""
  vault-client-token: ""
  vault-client-cert: ""
  vault-client-key: ""
  vault-client-auth-param: ""
---
apiVersion: v1
kind: Secret
metadata:
  name: flightsim-worker
  labels:
    app: flightsim-worker
    chart: concourse-16.1.21
    release: flightsim
    heritage: Helm
type: Opaque
data:
  host-key-pub: c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFEWUJROWZHNklNTCtxc0ZhTWgxUGwrODF3eVV3UmlsSGRmaEl0QWlBc0xWUXNPd0k1K1Y0cG41YUxoSFBCdVJRcUlxWW1ia1o3STFWVUlOMSs5MFBWSjNYN2w5cXFhbmI4NUFITXRMdWp3MWo5dTB6RHlIMlhIZ3BVbG9rblVRelVTTElaampVM0huM1VvL1hpa0YrdlQ4MTA0aXNPN1ltOFhwN3NJY1J1dk9RM251UnNGVkNSb2d4cExUVkhEL2s1N3J3WVZxV1dMYUtMd3Z4MDFaVlhPcTRHSGsvQlZhS2E5T0RDL2ROZ2JaTWZ3dlZWWHVmNy9ORkdtU015WGI0OVNpNGFvUDRHbjdqQVg2R25nQmJtL2JnS3FPMHNrUXkvZ2dRbS9ZVkYrczVxNEVobGVNQkxWSktEMVZwTTVMZUxERnBpdS95NGJWZDh3VWNnSytRUTkgQ29uY291cnNl
  worker-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdVBlaFVtQlhBUUNvQTdUTEFRQ1loZit2emNaVnlqK1ZHWG5NaExIbldMazdkUmpvCkNVOEdnTmFtZFM1aDdHM3l3eE92S0EzWWpPTHI4WHlPTUxTNGMrZThON3RJemxNV2RpWGhlMGxjQkg5WjFhaTUKK0JvZjMvQmxEVUJrc2lLZGMxQStRY2ZYNnREd01rT081cmUxSDR2T0szSC9DeXBlNTh3Q0IwM0hZTmdiMDVFRApmVzFCajJxdnoyOVZ0bXlqd0VNdURzMTAwaU1xd0NmUFV4OW94WG1tWDhzVUJSbXcvWTFSeC84cGRLSWpLdzNtCmtXSUhIQk9TQ1BpbU8xcUM0N0FhOHYvVUg5aEVSQ3lreXVGSGlCaUtsbkl2WldtOWJZdmhzUlR6NGd0NUt6UlkKNk9JMG9WZUhsTE9IRFNLNDhEYThWV2lqMTVsT3FPMk54Nldzc1FJREFRQUJBb0lCQURFVDIyVU5GT2k2TU5wUwo1UzVONXlwZXpsbk9EME5MblpjVjN6TXlOUTB3a05zZ0Vha3VvNjRaeGk3L2NKSVlGanEyaFZvZVdsLy9jZFV3ClZGWU9EWWNMYk1CbzNBZUt1a0g5Q1JmNlBnVWZlVW1jckVOdFF4bmJJaVRpK2hUZDVHTU5Yb2Q3ckFtdENKNTkKbUhRVk9HUzNacXZXWW5LbSttbU1rdGszUlBpbnluWC9BNHkzV0hQYWN1QVM1OEhNMDlDazQzV2NITXhiR3BzTAovZ1pwSUN5RllaMkR2aU0rQUh5V0djbXc3TEpycEMwUUhvNitCQUZNczR4bFVlY05nVklGVXBmT29BY2ZzZHRHCks5ajRBYnVaNDdpRmlzYmF5KzFweWcvN081ZVJUZEdWUVJ0YzdQQk1PamVhNWpHc2ZtbERtZG4xWlM1MHlrdW4KQU5mb1E1VUNnWUVBOUFrNzNQUnk5bkxsUmt0NE9CQ0YvNGZ3VGhVQ01lZHNuV2FWalFCTUpZaW00RkIyaXZGNQpjS2RXdDN5L1JaSTg1S0tZdTBFWGhMRW9TSUVBZnowNTdSOHQzUWRWSzR0Wng2QjQ3VUZqQmpDWWVWTXR3SERRCnByeFFpT1BISUhDcGxCTkZ1R3pBNVZYTDlnUUxSRCtlazB1T3kyR0pKMFd1MXh5ZW91SStTVzhDZ1lFQXdna08KVE90T29ncW1jQUFMaldnZWVRaVpldGZsU0tiSmxwUU5obUNQQU1tMFNGSThlRjRTcFJYTHpkNDFWQzJtTEl3VApMM3RqYzcvOG9jWG9FbEZNNEwwZm85THgvU0hGSDRKRW41RlQwUFhQbXZzRjJKUmhzWEpGTEpTaWh4Ri85MVhzCjJhQmNRSUxQRnpMY3JJNk9GVWFrTndHVFUvQ0l4cGt6UnZRckc5OENnWUVBek5WblV1bzRDTmFkemFnUkszWHIKRTNZbDVWUksrRnBZMTdGQWZBNncyNXhjL2RGci91bjYxZTBQbzRuby9sdG1FejdMVmZtbjVPL1NjVEVlbXE1bwpqYmpyQlNoZmUrSkdwSUgwbnFpUWxxUjVodlNqWlhFTUliZlZIV0diUllaclFHZ0EwSEV3WkE3azJRWEI4ekkzClIwbFhmU3pNTTVPUTB1d3AxMnh4ZmE4Q2dZQkhJTHExUjZ6VGljUHBXcHJoZzBGb2JOYVdTWDRyVzdpYUVqdkMKL3JKdFA0TnUzM1o3U1VEY2MxajZabkoySVNYQlByZnB0L21FL09QSENaMUEyYnlzeGFkTGpwQldrb0tJUW1DVgpmZGlUeVFnSmIrdDhzU2YrdkR6UFVzMGhaakRhb2d6bzJmZjNUZnhNTE1Eb0lIbkZJdGdmc2R3bjhReXlnSVpqCmhDNHBVUUtCZ1FEcXN4bmtJNnlYRkU1Z3Noblc3SDh6cUtObHpLZC9kWkVMNmUrbFJ6NFIzVVkvS2NFa1JBZnEKWWkzY3dvOWZFM1Uza1NtcGw1TVF3VWpXbS9CWjdKeXVlb1kvNG5kd2FGUGdjMzRJS3NnSjB3YXU5cFppUUFCMQpEeHBPU0YrQlI3MUp4M3N4dklkQ09ETlR0bTY0NWo1eXJaVm5KQXVNUG9mbzVYRm11bkRvSkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: flightsim-docker-registry-secret
  labels:
    app: docker-registry
    chart: docker-registry-1.9.6
    heritage: Helm
    release: flightsim
type: Opaque
data:
  haSharedSecret: VlMyY3VTN0FsejZZNDFOMw==
---
apiVersion: v1
kind: Secret
metadata:
  name: flightsim-postgresql
  labels:
    app: flightsim-postgresql
    chart: postgresql-0.6.0
    release: flightsim
    heritage: Helm
type: Opaque
data:
  postgres-password: Z29ncw==
---
apiVersion: v1
kind: Secret
metadata:
  name: flightsim-gogs
  labels:
    app: flightsim-gogs
    chart: gogs-0.7.12
    release: flightsim
    heritage: Helm
type: Opaque
data:
  postgresql-user: Z29ncw==
---
apiVersion: v1
kind: Secret
metadata:
  name: flightsim-minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: flightsim
    heritage: Helm
type: Opaque
data:
  accesskey: MTIzNDU2
  secretkey: cXdlcnR5dWk=
---
apiVersion: v1
kind: Secret
metadata:
  name: flightsim-vault-creds
data:
  role-id: N0QzNUIwNDYtRDlCOC00Q0Q2LTg2NDAtMjIyN0IwMkU3QjM2
  secret-id: N0VFM0Y4NEUtRTgxRS00NTFFLUE2MzEtNzdFNzU5RDk4NTY0
  auth-param: cm9sZV9pZDo3RDM1QjA0Ni1EOUI4LTRDRDYtODY0MC0yMjI3QjAyRTdCMzYsc2VjcmV0X2lkOjdFRTNGODRFLUU4MUUtNDUxRS1BNjMxLTc3RTc1OUQ5ODU2NA==
  gogs-password: cGFzc3dvcmQ=
  minio-access-key: MTIzNDU2
  minio-secret-access-key: cXdlcnR5dWk=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: flightsim-worker
  labels:
    app: flightsim-worker
    chart: concourse-16.1.21
    release: flightsim
    heritage: Helm
data:
  pre-stop-hook.sh: |
    #!/bin/bash
    kill -s SIGUSR2 1
    while [ -e /proc/1 ]; do sleep 1; done
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: flightsim-docker-registry-config
  labels:
    app: docker-registry
    chart: docker-registry-1.9.6
    heritage: Helm
    release: flightsim
data:
  config.yml: |-
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
    http:
      addr: :5000
      headers:
        X-Content-Type-Options:
        - nosniff
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
    version: 0.1
---
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    app: flightsim-gogs-tcp
    chart: gogs-0.7.12
    component: gogs
    heritage: Helm
    release: flightsim
  name: tcp-flightsim-gogs-ssh
data:
  2222: default/flightsim-gogs:ssh
---
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    app: flightsim-gogs-config
    chart: gogs-0.7.12
    component: gogs
    heritage: Helm
    release: flightsim
  name: flightsim-gogs-config
data:
  app.ini: "APP_NAME = Gogs\nRUN_MODE = prod\n\n[repository.upload]\nENABLED = true\nALLOWED_TYPES = \nMAX_FILE_SIZE = 3\nMAX_FILES = 5\n\n[server]\nPROTOCOL = http\nDOMAIN = gogs.k8s.blit.cc\nROOT_URL = http://gogs.k8s.blit.cc\nLANDING_PAGE = home\nSSH_DOMAIN = localhost\nSSH_PORT = 22\nSSH_LISTEN_PORT = 22\n\n[service]\nENABLE_CAPTCHA = false\nACTIVE_CODE_LIVE_MINUTES = 180\nRESET_PASSWD_CODE_LIVE_MINUTES = 180\nREGISTER_EMAIL_CONFIRM = false\nDISABLE_REGISTRATION = false\nREQUIRE_SIGNIN_VIEW = false\nENABLE_NOTIFY_MAIL = false\nENABLE_REVERSE_PROXY_AUTHENTICATION = false\nENABLE_REVERSE_PROXY_AUTO_REGISTRATION = false\n\n[mailer]\nENABLED = false\nHOST = \nDISABLE_HELO = false\nHELO_HOSTNAME =\nSKIP_VERIFY = false\nSUBJECT_PREFIX = \nFROM = \nUSER = \nPASSWD = \nUSE_PLAIN_TEXT = text/plain\n\n[database]\nDB_TYPE = \"postgres\"\nHOST = flightsim-postgresql\nNAME = \"gogs\"\nUSER = \"gogs\"\nPASSWD = \"gogs\"\nSSL_MODE = \"disable\"\n\n[security]\nINSTALL_LOCK = true\nSECRET_KEY = \"Y2hhbmdlbWU=\"\n\n[ui]\nEXPLORE_PAGING_NUM = 20\nISSUE_PAGING_NUM = 10\nFEED_MAX_COMMIT_NUM = 5\n\n[cache]\nADAPTER = memory\nINTERVAL = 60\nHOST = \n\n[webhook]\nQUEUE_LENGTH = 1000\nDELIVER_TIMEOUT = 5\nSKIP_TLS_VERIFY = true\nPAGING_NUM = 10\n\n[log]\nMODE = console\nLEVEL = Trace\n\n[cron]\nENABLED = true\nRUN_AT_START = false\n\n[cron.update_mirrors]\nSCHEDULE = @every 10m\n\n[cron.repo_health_check]\nSCHEDULE = @every 24h\nTIMEOUT = 60s\nARGS = \n\n[cron.check_repo_stats]\nRUN_AT_START = true\nSCHEDULE = @every 24h\n\n[cron.repo_archive_cleanup]\nRUN_AT_START = false\nSCHEDULE = @every 24h\nOLDER_THAN = 24h\n\n[other]\nSHOW_FOOTER_BRANDING = false\nSHOW_FOOTER_VERSION = true\nSHOW_FOOTER_TEMPLATE_LOAD_TIME = true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: flightsim-minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: flightsim
    heritage: Helm
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"

    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }

    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
      VERSIONING=$4

      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi

      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi


      # set versioning for bucket
      if [ ! -z $VERSIONING ] ; then
        if [ $VERSIONING = true ] ; then
            echo "Enabling versioning for '$BUCKET'"
            ${MC} version enable myminio/$BUCKET
        elif [ $VERSIONING = false ] ; then
            echo "Suspending versioning for '$BUCKET'"
            ${MC} version suspend myminio/$BUCKET
        fi
      else
          echo "Bucket '$BUCKET' versioning unchanged."
      fi

      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} policy set $POLICY myminio/$BUCKET
    }

    # Try connecting to Minio instance
    scheme=http
    connectToMinio $scheme
    # Create the buckets
    createBucket config none false true
    createBucket release-candidates none false true
    createBucket test-reports none
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: flightsim-postgresql
  labels:
    app: flightsim-postgresql
    chart: postgresql-0.6.0
    release: flightsim
    heritage: Helm
  annotations:
    volume.alpha.kubernetes.io/storage-class: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: flightsim-gogs
  labels:
    app: flightsim-gogs
    chart: gogs-0.7.12
    release: flightsim
    heritage: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flightsim-vault-server-binding
  labels:
    helm.sh/chart: vault-0.19.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: flightsim
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: flightsim-vault
    namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: flightsim-minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-8.0.10
    release: flightsim
    heritage: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
      - update
      - patch
    resourceNames:
      - flightsim-minio-prometheus
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - servicemonitors
    verbs:
      - get
    resourceNames:
      - flightsim-minio
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: flightsim-minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-8.0.10
    release: flightsim
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: flightsim-minio-update-prometheus-secret
subjects:
  - kind: ServiceAccount
    name: flightsim-minio-update-prometheus-secret
    namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-concourse-postgres-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: flightsim
    app.kubernetes.io/managed-by: Helm
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: flightsim
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-concourse-postgres
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: flightsim
    app.kubernetes.io/managed-by: Helm
  annotations: null
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: flightsim
    role: primary
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-web
  labels:
    app: flightsim-web
    chart: concourse-16.1.21
    release: flightsim
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: atc
      port: 8080
      targetPort: atc
  selector:
    app: flightsim-web
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-web-worker-gateway
  labels:
    app: flightsim-web
    chart: concourse-16.1.21
    release: flightsim
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: worker-gateway
      port: 2222
      targetPort: tsa
  selector:
    app: flightsim-web
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-worker
  labels:
    app: flightsim-worker
    chart: concourse-16.1.21
    release: flightsim
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports: []
  selector:
    app: flightsim-worker
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-docker-registry
  labels:
    app: docker-registry
    chart: docker-registry-1.9.6
    release: flightsim
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5000
      protocol: TCP
      name: registry
      targetPort: 5000
  selector:
    app: docker-registry
    release: flightsim
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-postgresql
  labels:
    app: flightsim-postgresql
    chart: postgresql-0.6.0
    release: flightsim
    heritage: Helm
spec:
  ports:
    - name: postgresql
      port: 5432
      targetPort: postgresql
  selector:
    app: flightsim-postgresql
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-gogs
  labels:
    chart: gogs-0.7.12
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 3000
      nodePort: 30001
      name: gogs-http
    - port: 22
      targetPort: 22
      nodePort: 30022
      name: gogs-ssh
  selector:
    app: flightsim-gogs
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-mailhog
  labels:
    helm.sh/chart: mailhog-5.0.5
    app.kubernetes.io/name: mailhog
    app.kubernetes.io/instance: flightsim
    app.kubernetes.io/version: v1.0.1
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8025
      protocol: TCP
      targetPort: http
    - name: tcp-smtp
      port: 25
      protocol: TCP
      targetPort: 1025
  selector:
    app.kubernetes.io/name: mailhog
    app.kubernetes.io/instance: flightsim
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: flightsim
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
    release: flightsim
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-minio-svc
  labels:
    app: minio
    chart: minio-8.0.10
    release: flightsim
    heritage: Helm
spec:
  publishNotReadyAddresses: true
  clusterIP: None
  ports:
    - name: http
      port: 9000
      protocol: TCP
  selector:
    app: minio
    release: flightsim
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-vault-internal
  namespace: default
  labels:
    helm.sh/chart: vault-0.19.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: flightsim
    app.kubernetes.io/managed-by: Helm
  annotations: null
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 8200
      targetPort: 8200
    - name: https-internal
      port: 8201
      targetPort: 8201
  selector:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: flightsim
    component: server
---
apiVersion: v1
kind: Service
metadata:
  name: flightsim-vault
  namespace: default
  labels:
    helm.sh/chart: vault-0.19.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: flightsim
    app.kubernetes.io/managed-by: Helm
  annotations: null
spec:
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 8200
      targetPort: 8200
    - name: https-internal
      port: 8201
      targetPort: 8201
  selector:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: flightsim
    component: server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flightsim-web
  labels:
    app: flightsim-web
    chart: concourse-16.1.21
    release: flightsim
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flightsim-web
      release: flightsim
  template:
    metadata:
      labels:
        app: flightsim-web
        release: flightsim
      annotations:
        checksum/secrets: d81cb5c3f923145eb39f3f363da318cff8025dc2d24430a77eb504082f7ecbb9
        checksum/config: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      serviceAccountName: flightsim-web
      initContainers:
        - name: concourse-migration
          image: concourse/concourse:7.7.0
          args:
            - migrate
            - --migrate-to-latest-version
          env:
            - name: CONCOURSE_POSTGRES_HOST
              value: flightsim-concourse-postgres
            - name: CONCOURSE_POSTGRES_USER
              value: concourse
            - name: CONCOURSE_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flightsim-concourse-postgres
                  key: postgresql-password
            - name: CONCOURSE_POSTGRES_DATABASE
              value: concourse
          volumeMounts: null
      containers:
        - name: flightsim-web
          image: concourse/concourse:7.7.0
          imagePullPolicy: IfNotPresent
          args:
            - web
          env:
            - name: CONCOURSE_ENABLE_GLOBAL_RESOURCES
              value: "true"
            - name: CONCOURSE_SECRET_RETRY_ATTEMPTS
              value: "5"
            - name: CONCOURSE_SECRET_RETRY_INTERVAL
              value: 1s
            - name: CONCOURSE_LOG_LEVEL
              value: info
            - name: CONCOURSE_BIND_PORT
              value: "8080"
            - name: CONCOURSE_BIND_IP
              value: 0.0.0.0
            - name: CONCOURSE_ADD_LOCAL_USER
              valueFrom:
                secretKeyRef:
                  name: flightsim-web
                  key: local-users
            - name: CONCOURSE_DEBUG_BIND_IP
              value: 127.0.0.1
            - name: CONCOURSE_DEBUG_BIND_PORT
              value: "8079"
            - name: CONCOURSE_INTERCEPT_IDLE_TIMEOUT
              value: 0m
            - name: CONCOURSE_GLOBAL_RESOURCE_CHECK_TIMEOUT
              value: 1h
            - name: CONCOURSE_RESOURCE_CHECKING_INTERVAL
              value: 1m
            - name: CONCOURSE_RESOURCE_WITH_WEBHOOK_CHECKING_INTERVAL
              value: 1m
            - name: CONCOURSE_CONTAINER_PLACEMENT_STRATEGY
              value: volume-locality
            - name: CONCOURSE_BAGGAGECLAIM_RESPONSE_HEADER_TIMEOUT
              value: 1m
            - name: CONCOURSE_BUILD_TRACKER_INTERVAL
              value: 10s
            - name: CONCOURSE_POSTGRES_HOST
              value: flightsim-concourse-postgres
            - name: CONCOURSE_POSTGRES_USER
              value: concourse
            - name: CONCOURSE_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flightsim-concourse-postgres
                  key: postgresql-password
            - name: CONCOURSE_POSTGRES_DATABASE
              value: concourse
            - name: CONCOURSE_VAULT_URL
              value: http://flightsim-vault:8200
            - name: CONCOURSE_VAULT_PATH_PREFIX
              value: /concourse
            - name: CONCOURSE_VAULT_AUTH_BACKEND
              value: approle
            - name: CONCOURSE_VAULT_AUTH_PARAM
              valueFrom:
                secretKeyRef:
                  key: auth-param
                  name: flightsim-vault-creds
            - name: CONCOURSE_VAULT_RETRY_INITIAL
              value: 1s
            - name: CONCOURSE_VAULT_RETRY_MAX
              value: 5m
            - name: CONCOURSE_GC_INTERVAL
              value: 30s
            - name: CONCOURSE_GC_ONE_OFF_GRACE_PERIOD
              value: 5m
            - name: CONCOURSE_GC_MISSING_GRACE_PERIOD
              value: 5m
            - name: CONCOURSE_AUTH_DURATION
              value: 24h
            - name: CONCOURSE_SESSION_SIGNING_KEY
              value: /concourse-keys/session_signing_key
            - name: CONCOURSE_MAIN_TEAM_LOCAL_USER
              value: concourse
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CONCOURSE_PEER_ADDRESS
              value: $(POD_IP)
            - name: CONCOURSE_TSA_LOG_LEVEL
              value: info
            - name: CONCOURSE_TSA_BIND_IP
              value: 0.0.0.0
            - name: CONCOURSE_TSA_BIND_PORT
              value: "2222"
            - name: CONCOURSE_TSA_DEBUG_BIND_IP
              value: 127.0.0.1
            - name: CONCOURSE_TSA_DEBUG_BIND_PORT
              value: "2221"
            - name: CONCOURSE_TSA_HOST_KEY
              value: /concourse-keys/host_key
            - name: CONCOURSE_TSA_AUTHORIZED_KEYS
              value: /concourse-keys/worker_key.pub
            - name: CONCOURSE_TSA_HEARTBEAT_INTERVAL
              value: 30s
            - name: CONCOURSE_EXTERNAL_URL
              value: http://concourse.k8s.blit.cc
          ports:
            - name: atc
              containerPort: 8080
            - name: tsa
              containerPort: 2222
            - name: atc-debug
              containerPort: 8079
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/v1/info
              port: atc
            initialDelaySeconds: 10
            periodSeconds: 15
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /api/v1/info
              port: atc
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: concourse-keys
              mountPath: /concourse-keys
              readOnly: true
            - name: vault-keys
              mountPath: /concourse-vault
              readOnly: true
            - name: auth-keys
              mountPath: /concourse-auth
              readOnly: true
      volumes:
        - name: concourse-keys
          secret:
            secretName: flightsim-web
            defaultMode: 256
            items:
              - key: host-key
                path: host_key
              - key: session-signing-key
                path: session_signing_key
              - key: worker-key-pub
                path: worker_key.pub
        - name: vault-keys
          secret:
            secretName: flightsim-web
            defaultMode: 256
            items: null
        - name: auth-keys
          secret:
            secretName: flightsim-web
            defaultMode: 256
            items: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flightsim-docker-registry
  labels:
    app: docker-registry
    chart: docker-registry-1.9.6
    release: flightsim
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: docker-registry
      release: flightsim
  replicas: 1
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: docker-registry
        release: flightsim
      annotations:
        checksum/config: 420569cdacb79c445527db619c5e10afab296394bbd16cbd12af75e73fff2bf2
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
        - name: docker-registry
          image: registry:2.7.1
          imagePullPolicy: IfNotPresent
          command:
            - /bin/registry
            - serve
            - /etc/docker/registry/config.yml
          ports:
            - containerPort: 5000
          livenessProbe:
            httpGet:
              path: /
              port: 5000
          readinessProbe:
            httpGet:
              path: /
              port: 5000
          resources: {}
          env:
            - name: REGISTRY_HTTP_SECRET
              valueFrom:
                secretKeyRef:
                  name: flightsim-docker-registry-secret
                  key: haSharedSecret
            - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
              value: /var/lib/registry
          volumeMounts:
            - name: data
              mountPath: /var/lib/registry/
            - name: flightsim-docker-registry-config
              mountPath: /etc/docker/registry
      volumes:
        - name: data
          emptyDir: {}
        - name: flightsim-docker-registry-config
          configMap:
            name: flightsim-docker-registry-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flightsim-postgresql
  labels:
    app: flightsim-postgresql
    chart: postgresql-0.6.0
    release: flightsim
    heritage: Helm
spec:
  template:
    metadata:
      labels:
        app: flightsim-postgresql
    spec:
      containers:
        - name: flightsim-postgresql
          image: postgres:9.6.2
          imagePullPolicy: "Always"
          env:
            - name: POSTGRES_USER
              value: gogs
            - name: PGUSER
              value: gogs
            - name: POSTGRES_DB
              value: gogs
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flightsim-postgresql
                  key: postgres-password
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - name: postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready --host $POD_IP
            initialDelaySeconds: 60
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready --host $POD_IP
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 5
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data/pgdata
              subPath: postgresql-db
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: flightsim-postgresql
  selector:
    matchLabels:
      app: flightsim-postgresql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flightsim-gogs
  labels:
    chart: gogs-0.7.12
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: flightsim-gogs
  template:
    metadata:
      labels:
        app: flightsim-gogs
    spec:
      containers:
        - name: gogs
          image: gogs/gogs:0.11.86
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
            - containerPort: 22
          livenessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: /
              port: 3000
          readinessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: /
              port: 3000
          env:
            - name: SOCAT_LINK
              value: "false"
            - name: GOGS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: gogs-password
                  name: flightsim-vault-creds
            - name: GOGS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: gogs-password
                  name: flightsim-vault-creds
          resources: null
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /data/gogs/conf/app.ini
              subPath: app.ini
          lifecycle:
            postStart:
              exec:
                command:
                  - bash
                  - -euc
                  - |
                    username="student"
                    curl --fail -4 --retry 12 --retry-connrefused --retry-delay 5 -X POST 'http://localhost:3000/user/sign_up' \
                      -d "user_name=$username&email=$username@local.host&password=$GOGS_PASSWORD&retype=$GOGS_PASSWORD"
                    access_token=$(curl --fail --silent --basic -u "$username:$GOGS_PASSWORD" -F name=setup \
                      'http://localhost:3000/api/v1/users/concourse/tokens' | sed -n 's/.*"sha1":"\(.*\)"}/\1/p')
                    curl -S -H "Authorization: token $access_token" 'http://localhost:3000/api/v1/repos/migrate' \
                      -F clone_addr="https://github.com/EngineerBetter/yml2env-training.git" -F uid=1 -F repo_name="yml2env"
                    curl -S -H "Authorization: token $access_token" 'http://localhost:3000/api/v1/repos/migrate' \
                      -F clone_addr="https://github.com/EngineerBetter/lab-assets.git" -F uid=1 -F repo_name="lab-assets"
      volumes:
        - name: config
          configMap:
            name: flightsim-gogs-config
        - name: data
          persistentVolumeClaim:
            claimName: flightsim-gogs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flightsim-mailhog
  labels:
    helm.sh/chart: mailhog-5.0.5
    app.kubernetes.io/name: mailhog
    app.kubernetes.io/instance: flightsim
    app.kubernetes.io/version: v1.0.1
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mailhog
      app.kubernetes.io/instance: flightsim
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mailhog
        app.kubernetes.io/instance: flightsim
    spec:
      serviceAccountName: flightsim-mailhog
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: mailhog
          image: docker.io/mailhog/mailhog:v1.0.1
          imagePullPolicy: IfNotPresent
          env:
            - name: MH_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: http
              containerPort: 8025
              protocol: TCP
            - name: tcp-smtp
              containerPort: 1025
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: tcp-smtp
            initialDelaySeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            tcpSocket:
              port: tcp-smtp
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
          resources: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: flightsim-concourse-postgres
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: flightsim
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations: null
  namespace: default
spec:
  serviceName: flightsim-concourse-postgres-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: flightsim
      role: primary
  template:
    metadata:
      name: flightsim-concourse-postgres
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.16.2
        app.kubernetes.io/instance: flightsim
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: flightsim
                    app.kubernetes.io/component: primary
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: flightsim-concourse-postgres
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r28
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: /bitnami/postgresql
            - name: PGDATA
              value: /bitnami/postgresql/data
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flightsim-concourse-postgres
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: concourse
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flightsim-concourse-postgres
                  key: postgresql-password
            - name: POSTGRES_DB
              value: concourse
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: error
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "concourse" -d "dbname=concourse" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "concourse" -d "dbname=concourse" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: null
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: flightsim-worker
  labels:
    app: flightsim-worker
    chart: concourse-16.1.21
    release: flightsim
    heritage: Helm
spec:
  serviceName: flightsim-worker
  replicas: 1
  selector:
    matchLabels:
      app: flightsim-worker
      release: flightsim
  template:
    metadata:
      labels:
        app: flightsim-worker
        release: flightsim
      annotations:
        checksum/secrets: 0ca88d607eec7dd7d88c9c37217190809efdca9329f111cb925c94305e3d86bb
    spec:
      serviceAccountName: flightsim-worker
      terminationGracePeriodSeconds: 60
      initContainers:
        - name: flightsim-worker-init-rm
          image: concourse/concourse:7.7.0
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          command:
            - /bin/bash
          args:
            - -ce
            - |-
              for v in $((btrfs subvolume list --sort=-ogen "/concourse-work-dir" || true) | awk '{print $9}'); do
                (btrfs subvolume show "/concourse-work-dir/$v" && btrfs subvolume delete "/concourse-work-dir/$v") || true
              done
              rm -rf "/concourse-work-dir/*"
          volumeMounts:
            - name: concourse-work-dir
              mountPath: /concourse-work-dir
      containers:
        - name: flightsim-worker
          image: concourse/concourse:7.7.0
          imagePullPolicy: IfNotPresent
          args:
            - worker
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: worker-hc
            initialDelaySeconds: 10
            periodSeconds: 15
            timeoutSeconds: 3
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - /pre-stop-hook.sh
          env:
            - name: CONCOURSE_SWEEP_INTERVAL
              value: 30s
            - name: CONCOURSE_CONNECTION_DRAIN_TIMEOUT
              value: 1h
            - name: CONCOURSE_HEALTHCHECK_BIND_IP
              value: 0.0.0.0
            - name: CONCOURSE_HEALTHCHECK_BIND_PORT
              value: "8888"
            - name: CONCOURSE_HEALTHCHECK_TIMEOUT
              value: 5s
            - name: CONCOURSE_DEBUG_BIND_IP
              value: 127.0.0.1
            - name: CONCOURSE_DEBUG_BIND_PORT
              value: "7776"
            - name: CONCOURSE_WORK_DIR
              value: /concourse-work-dir
            - name: CONCOURSE_BIND_IP
              value: 127.0.0.1
            - name: CONCOURSE_BIND_PORT
              value: "7777"
            - name: CONCOURSE_LOG_LEVEL
              value: info
            - name: CONCOURSE_TSA_HOST
              value: flightsim-web-worker-gateway:2222
            - name: CONCOURSE_TSA_PUBLIC_KEY
              value: /concourse-keys/host_key.pub
            - name: CONCOURSE_TSA_WORKER_PRIVATE_KEY
              value: /concourse-keys/worker_key
            - name: CONCOURSE_GARDEN_DNS_PROXY_ENABLE
              value: "false"
            - name: CONCOURSE_BAGGAGECLAIM_LOG_LEVEL
              value: info
            - name: CONCOURSE_BAGGAGECLAIM_BIND_IP
              value: 127.0.0.1
            - name: CONCOURSE_BAGGAGECLAIM_BIND_PORT
              value: "7788"
            - name: CONCOURSE_BAGGAGECLAIM_DEBUG_BIND_IP
              value: 127.0.0.1
            - name: CONCOURSE_BAGGAGECLAIM_DEBUG_BIND_PORT
              value: "7787"
            - name: CONCOURSE_BAGGAGECLAIM_BTRFS_BIN
              value: btrfs
            - name: CONCOURSE_BAGGAGECLAIM_MKFS_BIN
              value: mkfs.btrfs
            - name: CONCOURSE_VOLUME_SWEEPER_MAX_IN_FLIGHT
              value: "5"
            - name: CONCOURSE_CONTAINER_SWEEPER_MAX_IN_FLIGHT
              value: "5"
          ports:
            - name: worker-hc
              containerPort: 8888
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            privileged: true
          volumeMounts:
            - name: concourse-keys
              mountPath: /concourse-keys
              readOnly: true
            - name: concourse-work-dir
              mountPath: /concourse-work-dir
            - name: pre-stop-hook
              mountPath: /pre-stop-hook.sh
              subPath: pre-stop-hook.sh
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: flightsim-worker
                    release: flightsim
      volumes:
        - name: pre-stop-hook
          configMap:
            name: flightsim-worker
        - name: concourse-keys
          secret:
            secretName: flightsim-worker
            defaultMode: 256
            items:
              - key: host-key-pub
                path: host_key.pub
              - key: worker-key
                path: worker_key
  volumeClaimTemplates:
    - metadata:
        name: concourse-work-dir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: flightsim-minio
  labels:
    app: minio
    chart: minio-8.0.10
    release: flightsim
    heritage: Helm
spec:
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  serviceName: flightsim-minio-svc
  replicas: 4
  selector:
    matchLabels:
      app: minio
      release: flightsim
  template:
    metadata:
      name: flightsim-minio
      labels:
        app: minio
        release: flightsim
      annotations:
        checksum/secrets: 7c9f97702c211bf14cf4311ca5980168fa449af4709fb0c6ebd00f38de18aab9
        checksum/config: 0c9d14d123ddb2fa855e532b74a17b2427426a63d5a6d50c37755c21a38ea425
    spec:
      serviceAccountName: flightsim-minio
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: minio
          image: minio/minio:RELEASE.2021-02-14T04-01-33Z
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -ce
            - /usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server  http://flightsim-minio-{0...3}.flightsim-minio-svc.default.svc.cluster.local/export
          volumeMounts:
            - name: export
              mountPath: /export
          ports:
            - name: http
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: flightsim-minio
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: flightsim-minio
                  key: secretkey
          resources:
            requests:
              memory: 256M
      volumes:
        - name: minio-user
          secret:
            secretName: flightsim-minio
  volumeClaimTemplates:
    - metadata:
        name: export
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: flightsim-vault
  namespace: default
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: flightsim
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: flightsim-vault-internal
  podManagementPolicy: Parallel
  replicas: 1
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app.kubernetes.io/name: vault
      app.kubernetes.io/instance: flightsim
      component: server
  template:
    metadata:
      labels:
        helm.sh/chart: vault-0.19.0
        app.kubernetes.io/name: vault
        app.kubernetes.io/instance: flightsim
        component: server
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: flightsim-vault
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 100
        fsGroup: 1000
      volumes:
        - name: home
          emptyDir: {}
      containers:
        - name: vault
          image: hashicorp/vault:1.9.2
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -ec
          args:
            - "/usr/local/bin/docker-entrypoint.sh vault server -dev \n"
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: VAULT_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VAULT_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VAULT_ADDR
              value: http://127.0.0.1:8200
            - name: VAULT_API_ADDR
              value: http://$(POD_IP):8200
            - name: SKIP_CHOWN
              value: "true"
            - name: SKIP_SETCAP
              value: "true"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VAULT_CLUSTER_ADDR
              value: https://$(HOSTNAME).flightsim-vault-internal:8201
            - name: HOME
              value: /home/vault
            - name: VAULT_DEV_ROOT_TOKEN_ID
              value: root
            - name: VAULT_DEV_LISTEN_ADDRESS
              value: "[::]:8200"
            - name: CONCOURSE_ROLE_ID
              valueFrom:
                secretKeyRef:
                  key: role-id
                  name: flightsim-vault-creds
            - name: CONCOURSE_SECRET_ID
              valueFrom:
                secretKeyRef:
                  key: secret-id
                  name: flightsim-vault-creds
            - name: GOGS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: gogs-password
                  name: flightsim-vault-creds
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: minio-access-key
                  name: flightsim-vault-creds
            - name: MINIO_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: minio-secret-access-key
                  name: flightsim-vault-creds
            - name: CONCOURSE_ROLE_ID
              valueFrom:
                secretKeyRef:
                  key: role-id
                  name: flightsim-vault-creds
            - name: CONCOURSE_SECRET_ID
              valueFrom:
                secretKeyRef:
                  key: secret-id
                  name: flightsim-vault-creds
            - name: GOGS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: gogs-password
                  name: flightsim-vault-creds
          volumeMounts:
            - name: home
              mountPath: /home/vault
          ports:
            - containerPort: 8200
              name: http
            - containerPort: 8201
              name: https-internal
            - containerPort: 8202
              name: http-rep
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -ec
                - vault status -tls-skip-verify
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - sleep 5 && kill -SIGTERM $(pidof vault)
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -euc
                  - |
                    sleep 0.2
                    vault login root
                    # Enable kv secrets for Concourse
                    vault secrets enable -version=1 -path=concourse kv
                    cat <<EOF | vault policy write concourse -
                    path "concourse/*" {
                      policy = "read"
                    }
                    EOF
                    # Create approle with pre-defined credentials
                    vault auth enable approle
                    vault write auth/approle/role/concourse policies=concourse period=1h
                    vault write auth/approle/role/concourse/role-id role_id=$CONCOURSE_ROLE_ID
                    vault write auth/approle/role/concourse/custom-secret-id secret_id=$CONCOURSE_SECRET_ID
                    vault kv put concourse/main/gogs-password value=$GOGS_PASSWORD
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flightsim-ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
    - hosts:
        - concourse.k8s.blit.cc
        - minio.k8s.blit.cc
        - gogs.k8s.blit.cc
        - docker-registry.k8s.blit.cc
        - vault.k8s.blit.cc
        - mailhog.k8s.blit.cc
      secretName: flightsim-ingress-cert-prod
  rules:
    - host: concourse.k8s.blit.cc
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: flightsim-web
                port:
                  number: 8080
    - host: minio.k8s.blit.cc
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: flightsim-minio
                port:
                  number: 9000
    - host: gogs.k8s.blit.cc
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: flightsim-gogs
                port:
                  number: 80
    - host: docker-registry.k8s.blit.cc
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: flightsim-docker-registry
                port:
                  number: 5000
    - host: vault.k8s.blit.cc
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: flightsim-vault
                port:
                  number: 8200
    - host: mailhog.k8s.blit.cc
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: flightsim-mailhog
                port:
                  number: 8025
---
apiVersion: v1
kind: Pod
metadata:
  name: flightsim-server-test
  namespace: default
  annotations:
    helm.sh/hook: test
spec:
  containers:
    - name: flightsim-server-test
      image: hashicorp/vault:1.9.2
      imagePullPolicy: IfNotPresent
      env:
        - name: VAULT_ADDR
          value: http://flightsim-vault.default.svc:8200
      command:
        - /bin/sh
        - -c
        - |
          echo "Checking for sealed info in 'vault status' output"
          ATTEMPTS=10
          n=0
          until [ "$n" -ge $ATTEMPTS ]
          do
            echo "Attempt" $n...
            vault status -format yaml | grep -E '^sealed: (true|false)' && break
            n=$((n+1))
            sleep 5
          done
          if [ $n -ge $ATTEMPTS ]; then
            echo "timed out looking for sealed info in 'vault status' output"
            exit 1
          fi

          exit 0
      volumeMounts: null
  volumes: null
  restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  name: flightsim-minio-make-bucket-job
  labels:
    app: minio-make-bucket-job
    chart: minio-8.0.10
    release: flightsim
    heritage: Helm
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: minio-job
        release: flightsim
    spec:
      restartPolicy: OnFailure
      volumes:
        - name: minio-configuration
          projected:
            sources:
              - configMap:
                  name: flightsim-minio
              - secret:
                  name: flightsim-minio
      serviceAccountName: flightsim-minio
      containers:
        - name: minio-mc
          image: minio/mc:RELEASE.2021-02-14T04-28-06Z
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - /config/initialize
          env:
            - name: MINIO_ENDPOINT
              value: flightsim-minio
            - name: MINIO_PORT
              value: "9000"
          volumeMounts:
            - name: minio-configuration
              mountPath: /config
          resources:
            requests:
              memory: 128Mi
