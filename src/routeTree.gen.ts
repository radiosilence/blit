/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as CvRouteImport } from './routes/cv'
import { Route as LocaleRouteImport } from './routes/$locale'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LocaleIndexRouteImport } from './routes/$locale/index'
import { Route as LocaleCvRouteImport } from './routes/$locale/cv'

const CvRoute = CvRouteImport.update({
  id: '/cv',
  path: '/cv',
  getParentRoute: () => rootRouteImport,
} as any)
const LocaleRoute = LocaleRouteImport.update({
  id: '/$locale',
  path: '/$locale',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LocaleIndexRoute = LocaleIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LocaleRoute,
} as any)
const LocaleCvRoute = LocaleCvRouteImport.update({
  id: '/cv',
  path: '/cv',
  getParentRoute: () => LocaleRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/cv': typeof CvRoute
  '/$locale/cv': typeof LocaleCvRoute
  '/$locale/': typeof LocaleIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cv': typeof CvRoute
  '/$locale/cv': typeof LocaleCvRoute
  '/$locale': typeof LocaleIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$locale': typeof LocaleRouteWithChildren
  '/cv': typeof CvRoute
  '/$locale/cv': typeof LocaleCvRoute
  '/$locale/': typeof LocaleIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$locale' | '/cv' | '/$locale/cv' | '/$locale/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/cv' | '/$locale/cv' | '/$locale'
  id: '__root__' | '/' | '/$locale' | '/cv' | '/$locale/cv' | '/$locale/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LocaleRoute: typeof LocaleRouteWithChildren
  CvRoute: typeof CvRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/cv': {
      id: '/cv'
      path: '/cv'
      fullPath: '/cv'
      preLoaderRoute: typeof CvRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$locale': {
      id: '/$locale'
      path: '/$locale'
      fullPath: '/$locale'
      preLoaderRoute: typeof LocaleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$locale/': {
      id: '/$locale/'
      path: '/'
      fullPath: '/$locale/'
      preLoaderRoute: typeof LocaleIndexRouteImport
      parentRoute: typeof LocaleRoute
    }
    '/$locale/cv': {
      id: '/$locale/cv'
      path: '/cv'
      fullPath: '/$locale/cv'
      preLoaderRoute: typeof LocaleCvRouteImport
      parentRoute: typeof LocaleRoute
    }
  }
}

interface LocaleRouteChildren {
  LocaleCvRoute: typeof LocaleCvRoute
  LocaleIndexRoute: typeof LocaleIndexRoute
}

const LocaleRouteChildren: LocaleRouteChildren = {
  LocaleCvRoute: LocaleCvRoute,
  LocaleIndexRoute: LocaleIndexRoute,
}

const LocaleRouteWithChildren =
  LocaleRoute._addFileChildren(LocaleRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LocaleRoute: LocaleRouteWithChildren,
  CvRoute: CvRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
